/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package easyopt.shopSch;

/**
 * 使用迭代优化算法进行车间调度问题优化计算后的结果对象类，主要存储两类结果：
 * (1) schedule[][]：具体的调度方案数组，该数组列数随着问题的变化而变化，
 * 其中，第一列：作业编号，第二列：机器编号，第三列：工序编号
  *      第四列：开工时间，第五列：完工时间，第六列：交付时间，第七列：释放时间，
  *      第八列：调整开始时间，第九列：调整结束时间，第十列：调整时长,
  *      第十一列：同步开工的组号【同步启停并行机中，有组号为同步开工，0为不能同步开工】,
  *      第十二列：拆分订单情况下，该拆分的子作业单位作业数量
  *      第十三列：拆分订单情况下，该拆分的子作业在其父作业中的顺序号
  *      第十四列：机器调速情况下，该机器对该子作业加工所采取的速度代码
  *      第十五列：具有并行机情况下机器的统一编号
  *      第十六列：拆分订单情况下，该子作业在全部子作业中的统一编号<br>
  *(2) optSeries[][]：算法迭代过程每一代进化的目标函数值，一般为1+2obj列
  *【o为目标函数的数量，单目标优化时obj=1，多目标优化时obj为目标函数的数量】，
  *      第一列-迭代代数，第1+o*2-1列-迄今为止目标o的最优目标函数值，第1+o*2列-当代目标o的最优解
 * @author PeterWang, ShowClean Optimization Corporation.
 * @version 1.0
 */
public class SchOptResult {
  /**具体的调度方案数组，该数组列数随着问题的变化而变化，
 * 其中，第一列：作业编号，第二类：机器编号，第三列：工序编号
  *      第四列：开工时间，第五列：完工时间，第六列：交付时间，第七列：释放时间，
  *      第八列：调整开始时间，第九列：调整结束时间，第十列：调整时长
  *      第十一列：同步开工的组号【同步启停并行机中，有组号为同步开工，0为不能同步开工】,
  *      第十二列：拆分订单情况下，该拆分的子作业单位作业数量
  *      第十三列：拆分订单情况下，该拆分的子作业在整个作业中的顺序号
  *      第十四列：机器调速情况下，该机器对该子作业加工所采取的速度代码
   */  
  public double[][] schedule;
  /**算法迭代过程每一代进化的目标函数值，算法迭代过程每一代进化的目标函数值，一般为1+2obj列
  *【o为目标函数的数量，单目标优化时obj=1，多目标优化时obj为目标函数的数量】，
  *      第一列-迭代代数，第1+o*2-1列-迄今为止目标o的最优目标函数值，第1+o*2列-当代目标o的最优解
   */
  public double[][] optSeries;
  
}
